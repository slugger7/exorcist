// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/file_watcher/file_watcher.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/file_watcher/file_watcher.go
//

// Package mock_filewatcher is a generated GoMock package.
package mock_filewatcher

import (
	reflect "reflect"

	model "github.com/slugger7/exorcist/internal/db/exorcist/public/model"
	gomock "go.uber.org/mock/gomock"
)

// MockWatcherService is a mock of WatcherService interface.
type MockWatcherService struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherServiceMockRecorder
	isgomock struct{}
}

// MockWatcherServiceMockRecorder is the mock recorder for MockWatcherService.
type MockWatcherServiceMockRecorder struct {
	mock *MockWatcherService
}

// NewMockWatcherService creates a new mock instance.
func NewMockWatcherService(ctrl *gomock.Controller) *MockWatcherService {
	mock := &MockWatcherService{ctrl: ctrl}
	mock.recorder = &MockWatcherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherService) EXPECT() *MockWatcherServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockWatcherService) Add(libPath model.LibraryPath) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", libPath)
}

// Add indicates an expected call of Add.
func (mr *MockWatcherServiceMockRecorder) Add(libPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockWatcherService)(nil).Add), libPath)
}

// Close mocks base method.
func (m *MockWatcherService) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockWatcherServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWatcherService)(nil).Close))
}

// WithDirectoryWatcher mocks base method.
func (m *MockWatcherService) WithDirectoryWatcher() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithDirectoryWatcher")
}

// WithDirectoryWatcher indicates an expected call of WithDirectoryWatcher.
func (mr *MockWatcherServiceMockRecorder) WithDirectoryWatcher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDirectoryWatcher", reflect.TypeOf((*MockWatcherService)(nil).WithDirectoryWatcher))
}
